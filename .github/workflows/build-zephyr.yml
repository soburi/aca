name: Zephyr StaticLib

on:
  push:
  pull_request:
  workflow_dispatch:

permissions:
  contents: read

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        include:
          - arch: arm
            triplet: arm-zephyr-eabi
          - arch: riscv64
            triplet: riscv64-zephyr-elf
          - arch: x86_64
            triplet: x86_64-zephyr-elf
    runs-on: ubuntu-latest
    env:
      ZEPHYR_SDK_INSTALL_DIR: ${{ github.workspace }}/.zephyr-sdk-${{ env.ZEPHYR_SDK_VERSION }}
      ZEPHYR_SDK_VERSION: 0.16.5


    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Ensure dependencies
        run: sudo apt-get update && sudo apt-get install -y xz-utils

      - name: Cache Zephyr SDK
        id: cache-sdk
        uses: actions/cache@v4
        with:
          path: ${{ env.ZEPHYR_SDK_INSTALL_DIR }}
          key: zephyr-sdk-${{ runner.os }}-${{ env.ZEPHYR_SDK_VERSION }}

      - name: Download Zephyr SDK
        if: steps.cache-sdk.outputs.cache-hit != 'true'
        run: |
          cd "${RUNNER_TEMP}"
          wget -q https://github.com/zephyrproject-rtos/sdk-ng/releases/download/v${{ env.ZEPHYR_SDK_VERSION }}/zephyr-sdk-${{ env.ZEPHYR_SDK_VERSION }}_linux-x86_64.tar.xz
          tar -xf zephyr-sdk-${{ env.ZEPHYR_SDK_VERSION }}_linux-x86_64.tar.xz
          rm zephyr-sdk-${{ env.ZEPHYR_SDK_VERSION }}_linux-x86_64.tar.xz
          rm -rf "${{ env.ZEPHYR_SDK_INSTALL_DIR }}"
          mv "zephyr-sdk-${{ env.ZEPHYR_SDK_VERSION }}" "${{ env.ZEPHYR_SDK_INSTALL_DIR }}"


      - name: Setup Zephyr toolchain
        if: steps.cache-sdk.outputs.cache-hit != 'true'
        run: |
          cd ${{ env.ZEPHYR_SDK_INSTALL_DIR }}
          ./setup.sh -t ${{ matrix.triplet }}

      - name: Build static library
        run: |
          set -euo pipefail
          cd "${GITHUB_WORKSPACE}"

          BUILD_DIR="build/${{ matrix.arch }}"
          OBJ_DIR="${BUILD_DIR}/obj"
          mkdir -p "${OBJ_DIR}"

          TRIPLET="${{ matrix.triplet }}"
          TOOLBIN="${ZEPHYR_SDK_INSTALL_DIR}/${TRIPLET}/bin"

          SYSROOT="${ZEPHYR_SDK_INSTALL_DIR}/${TRIPLET}/${TRIPLET}"

          CFLAGS=(-Os -ffunction-sections -fdata-sections -fno-common "--sysroot=${SYSROOT}")
          CPPFLAGS=("${CFLAGS[@]}" -std=gnu++17)
          INCLUDES=(-Iapi -Iapi/deprecated -Iapi/deprecated-avr-comp -Iapi/deprecated-avr-comp/avr)

          mapfile -d '' SOURCES < <(find api -type f \( -name '*.c' -o -name '*.cpp' \) -print0)

          if [ "${#SOURCES[@]}" -eq 0 ]; then
            echo "No source files found in api/" >&2
            exit 1
          fi

          obj_files=()
          for src in "${SOURCES[@]}"; do
            rel="${src}"
            obj="${OBJ_DIR}/${rel//\//_}.o"
            if [[ "${src}" == *.c ]]; then
              "${TOOLBIN}/${TRIPLET}-gcc" "${CFLAGS[@]}" "${INCLUDES[@]}" -c "${src}" -o "${obj}"
            else
              "${TOOLBIN}/${TRIPLET}-g++" "${CPPFLAGS[@]}" "${INCLUDES[@]}" -c "${src}" -o "${obj}"
            fi
            obj_files+=("${obj}")
          done

          "${TOOLBIN}/${TRIPLET}-ar" rcs "${BUILD_DIR}/libarduino_compat.a" "${obj_files[@]}"

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: arduino-compat-${{ matrix.arch }}
          path: ${{ github.workspace }}/build/${{ matrix.arch }}/libarduino_compat.a
